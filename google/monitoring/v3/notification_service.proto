// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.monitoring.v3;

import "google/api/annotations.proto";
import "google/monitoring/v3/notification.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Google.Cloud.Monitoring.V3";
option go_package = "google.golang.org/genproto/googleapis/monitoring/v3;monitoring";
option java_multiple_files = true;
option java_outer_classname = "NotificationServiceProto";
option java_package = "com.google.monitoring.v3";


// The Notification Channel API provides access to configuration that
// controls how messages related to incidents are sent.
service NotificationChannelService {
  // Lists the descriptors for supported channel types. The use of descriptors
  // makes it possible for new channel types to be dynamically added.
  rpc ListNotificationChannelDescriptors(ListNotificationChannelDescriptorsRequest) returns (ListNotificationChannelDescriptorsResponse) {
    option (google.api.http) = { get: "/v3/{name=projects/*}/notificationChannelDescriptors" };
  }

  // Gets a single channel descriptor. The descriptor indicates which fields
  // are expected / permitted for a notification channel of the given type.
  rpc GetNotificationChannelDescriptor(GetNotificationChannelDescriptorRequest) returns (NotificationChannelDescriptor) {
    option (google.api.http) = { get: "/v3/{name=projects/*/notificationChannelDescriptors/*}" };
  }

  // Lists the notification channels that have been created for the project.
  rpc ListNotificationChannels(ListNotificationChannelsRequest) returns (ListNotificationChannelsResponse) {
    option (google.api.http) = { get: "/v3/{name=projects/*}/notificationChannels" };
  }

  // Gets a single notification channel. The channel includes the relevant
  // configuration details with which the channel was created. However, the
  // response may truncate or omit passwords, API keys, or other private key
  // matter and thus the response may not be 100% identical to the information
  // that was supplied in the call to the create method.
  rpc GetNotificationChannel(GetNotificationChannelRequest) returns (NotificationChannel) {
    option (google.api.http) = { get: "/v3/{name=projects/*/notificationChannels/*}" };
  }

  // Creates a new notification channel, representing a single notification
  // endpoint such as an email address, SMS number, or pagerduty service.
  rpc CreateNotificationChannel(CreateNotificationChannelRequest) returns (NotificationChannel) {
    option (google.api.http) = { post: "/v3/{name=projects/*}/notificationChannels" body: "notification_channel" };
  }

  // Updates a notification channel. Fields not specified in the field mask
  // remain unchanged.
  rpc UpdateNotificationChannel(UpdateNotificationChannelRequest) returns (NotificationChannel) {
    option (google.api.http) = { patch: "/v3/{notification_channel.name=projects/*/notificationChannels/*}" body: "notification_channel" };
  }

  // Deletes a notification channel.
  rpc DeleteNotificationChannel(DeleteNotificationChannelRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v3/{name=projects/*/notificationChannels/*}" };
  }
}

// The `ListNotificationChannelDescriptors` request.
message ListNotificationChannelDescriptorsRequest {
  // The REST resource name of the parent from which to retrieve
  // the notification channel descriptors. The expected syntax is:
  //
  //    "projects/[PROJECT_ID]"
  string name = 4;

  // The maximum number of results to return in a single response. If
  // not set to a positive number, a reasonable value will be chosen by the
  // service.
  int32 page_size = 2;

  // If non-empty, `page_token` must contain a value returned as the
  // `next_page_token` in a previous response to request the next set
  // of results.
  string page_token = 3;
}

// The `ListNotificationChannelDescriptors` response.
message ListNotificationChannelDescriptorsResponse {
  // The monitored resource descriptors supported for the specified
  // project, optionally filtered.
  repeated NotificationChannelDescriptor channel_descriptors = 1;

  // If not empty, indicates that there may be more results that match
  // the request. Use the value in the `page_token` field in a
  // subsequent request to fetch the next set of results. If empty,
  // all results have been returned.
  string next_page_token = 2;
}

// The `GetNotificationChannelDescriptor` response.
message GetNotificationChannelDescriptorRequest {
  // The channel type for which to execute the request. The format is
  // `"projects/{project_id_or_number}/notificationChannelDescriptors/{channel_type}"`.
  string name = 3;
}

// The `CreateNotificationChannel` request.
message CreateNotificationChannelRequest {
  // The project on which to execute the request. The format is
  // `"projects/{project_id_or_number}"`.
  string name = 3;

  // The definition of the `NotificationChannel` to create.
  NotificationChannel notification_channel = 2;
}

// The `ListNotificationChannels` request.
message ListNotificationChannelsRequest {
  // The project on which to execute the request. The format is
  // `"projects/{project_id_or_number}"`.
  string name = 5;

  // If provided, this field specifies the criteria that must be met by
  // notification channels to be included in the response. For more details, see
  // [sorting and
  // filtering](/monitoring/alpha-alerting/docs/sorting-and-filtering.md).
  string filter = 6;

  // A comma-separated list of fields by which to sort the result. Supports
  // the same set of fields as in `filter`. Entries can be prefixed with
  // a minus sign to sort in descending rather than ascending order.
  string order_by = 7;

  // The maximum number of results to return in a single response. If
  // not set to a positive number, a reasonable value will be chosen by the
  // service.
  int32 page_size = 3;

  // If non-empty, `page_token` must contain a value returned as the
  // `next_page_token` in a previous response to request the next set
  // of results.
  string page_token = 4;
}

// The `ListNotificationChannels` response.
message ListNotificationChannelsResponse {
  // The notification channels defined for the specified project.
  repeated NotificationChannel notification_channels = 3;

  // If not empty, indicates that there may be more results that match
  // the request. Use the value in the `page_token` field in a
  // subsequent request to fetch the next set of results. If empty,
  // all results have been returned.
  string next_page_token = 2;
}

// The `GetNotificationChannel` request.
message GetNotificationChannelRequest {
  // The channel for which to execute the request. The format is
  // `"projects/{project_id_or_number}/notificationChannels/{channel_id}"`.
  string name = 3;
}

// The `UpdateNotificationChannel` request.
message UpdateNotificationChannelRequest {
  // The fields to update.
  google.protobuf.FieldMask update_mask = 2;

  // A description of the changes to be applied to the specified
  // notification channel. The description must provide a definition for
  // fields to be updated; the names of these fields should also be
  // included in the `update_mask`.
  NotificationChannel notification_channel = 3;
}

// The `DeleteNotificationChannel` request.
message DeleteNotificationChannelRequest {
  // The channel for which to execute the request. The format is
  // `"projects/{project_id_or_number}/notificationChannels/{channel_id}"`.
  string name = 3;

  // If true, the notification channel will be deleted regardless of its
  // use in alert policies (the policies will be updated to remove the
  // channel). If false, channels that are still referenced by an existing
  // alerting policy will fail to be deleted in a delete operation.
  bool force = 5;
}

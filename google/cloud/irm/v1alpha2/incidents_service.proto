// This is the service definition of the Incident API for Incident Response &
// Management.
//
// References:
// - http://shortn/_ldc5DBAsSN
// - go/gcp-clarifications-on-list-search-explain (and related docs linked)

syntax = "proto3";

package google.cloud.irm.v1alpha2;

option cc_enable_arenas = true;
option java_api_version = 2;
option java_multiple_files = true;
option java_package = "com.google.irm.service.v1alpha2.api";

import "google/protobuf/timestamp.proto";
import "google/cloud/irm/v1alpha2/incidents.proto";
import "google/api/auditing.proto";
import "google/api/visibility.proto";
import "google/api/policy.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "storage/datapol/annotations/proto/semantic_annotations.proto";

// The Incident API for Incident Response & Management.
service IncidentService {
  option (google.api.api_visibility).restriction = "INCIDENTS_TRUSTED_TESTER";
  // Creates a new incident.
  rpc CreateIncident(CreateIncidentRequest) returns (Incident) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=projects/*}/incidents"
      body: "incident"
    };
  }

  // Returns an incident by name.
  rpc GetIncident(GetIncidentRequest) returns (Incident) {
    option (google.api.http) = {
      get: "/v1alpha2/{name=projects/*/incidents/*}"
    };
  }

  // Returns a list of incidents.
  // Incidents are ordered by start time, with the most recent incidents first.
  rpc SearchIncidents(SearchIncidentsRequest)
      returns (SearchIncidentsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*}/incidents:search"
    };
  }

  // Updates an existing incident.
  rpc UpdateIncident(UpdateIncidentRequest) returns (Incident) {
    option (google.api.http) = {
      patch: "/v1alpha2/{incident.name=projects/*/incidents/*}"
      body: "incident"
    };
  }

  // Returns a list of incidents that are "similar" to the specified incident
  // or signal. This functionality is provided on a best-effort basis and the
  // definition of "similar" is subject to change.
  rpc SearchSimilarIncidents(SearchSimilarIncidentsRequest)
      returns (SearchSimilarIncidentsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{name=projects/*/incidents/*}:searchSimilar"
      additional_bindings {
        get: "/v1alpha2/{name=projects/*/signals/*}:searchSimilarIncidents"
      }
    };
  }

  // Creates an annotation on an existing incident. Only 'text/plain' and
  // 'text/markdown' annotations can be created via this method.
  rpc CreateAnnotation(CreateAnnotationRequest) returns (Annotation) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=projects/*/incidents/*}/annotations"
      body: "annotation"
    };
  }

  // Lists annotations that are part of an incident. No assumptions should be
  // made on the content-type of the annotation returned.
  rpc ListAnnotations(ListAnnotationsRequest)
      returns (ListAnnotationsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*/incidents/*}/annotations"
    };
  }

  // Creates a tag on an existing incident.
  rpc CreateTag(CreateTagRequest) returns (Tag) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=projects/*/incidents/*}/tags"
      body: "tag"
    };
  }

  // Deletes an existing tag.
  rpc DeleteTag(DeleteTagRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha2/{name=projects/*/incidents/*/tags/*}"
    };
  }

  // Lists tags that are part of an incident.
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*/incidents/*}/tags"
    };
  }

  // Returns full tags as suggestions. These are intended to be shown to users
  // when they want to add a new tag. The suggestions might be customized based
  // on the context described in the request.
  rpc SearchTagSuggestions(SearchTagSuggestionsRequest)
      returns (SearchTagSuggestionsResponse) {
    option (google.api.method_visibility).restriction = "GOOGLE_INTERNAL";
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*/incidents/*}/tagSuggestions:search"
    };
  }

  // Creates a new signal.
  rpc CreateSignal(CreateSignalRequest) returns (Signal) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=projects/*}/signals"
      body: "signal"
    };
  }

  // Lists signals that are part of an incident.
  // Signals are returned in reverse chronological order.
  rpc ListSignals(ListSignalsRequest) returns (ListSignalsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*}/signals"
    };
  }

  // Returns a signal by name.
  rpc GetSignal(GetSignalRequest) returns (Signal) {
    option (google.api.http) = {
      get: "/v1alpha2/{name=projects/*/signals/*}"
    };
  }

  // Updates an existing signal (e.g. to assign/unassign it to an
  // incident).
  rpc UpdateSignal(UpdateSignalRequest) returns (Signal) {
    option (google.api.http) = {
      patch: "/v1alpha2/{signal.name=projects/*/signals/*}"
      body: "signal"
    };
  }

  // Acks a signal. This acknowledges the signal in the underlying system,
  // indicating that the caller takes responsibility for looking into this.
  // (--
  // TODO: Define behavior if the signal is already acked or the signal cannot
  // be acked. Should we use a specific error code for these? Or should we
  // support some way to gracefully succeed if the Ack is a no-op for some
  // reason?
  // --)
  rpc AcknowledgeSignal(AcknowledgeSignalRequest)
      returns (AcknowledgeSignalResponse) {
    option (google.api.http) = {
      post: "/v1alpha2/{name=projects/*/signals/*}:ack"
      body: "*"
    };
  }

  // Closes an open signal. This is only supported for signals that are based on
  // Stackdriver Alerting policies. Closing the signal will silence the
  // underlying policy for 5 minutes. This causes any new violation to create a
  // new signal, and can be used to close violations that are obsolete.
  // The request will succeed for signals that do not support closing or signals
  // that are already closed.
  rpc CloseSignal(CloseSignalRequest) returns (CloseSignalResponse) {
    option (google.api.method_visibility).restriction =
        "CLOSE_SIGNAL_TRUSTED_TESTER";
    option (google.api.http) = {
      post: "/v1alpha2/{name=projects/*/signals/*}:close"
      body: "*"
    };
  }

  // Lists metrics that are part of an incident.
  rpc ListMetrics(ListMetricsRequest) returns (ListMetricsResponse) {
    option (google.api.method_visibility).restriction = "GOOGLE_INTERNAL";
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*/incidents/*}/metrics"
    };
  }
  // TODO(davidcbc): Figure out appropriate methods for role assignment

  // Escalates an incident.
  rpc EscalateIncident(EscalateIncidentRequest)
      returns (EscalateIncidentResponse) {
    option (google.api.http) = {
      post: "/v1alpha2/{incident.name=projects/*/incidents/*}:escalate"
      body: "*"
    };
  }

  // Creates a new artifact.
  rpc CreateArtifact(CreateArtifactRequest) returns (Artifact) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=projects/*/incidents/*}/artifacts"
      body: "artifact"
    };
  }

  // Returns a list of artifacts for an incident.
  rpc ListArtifacts(ListArtifactsRequest) returns (ListArtifactsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*/incidents/*}/artifacts"
    };
  }

  // Updates an existing artifact.
  rpc UpdateArtifact(UpdateArtifactRequest) returns (Artifact) {
    option (google.api.http) = {
      patch: "/v1alpha2/{artifact.name=projects/*/incidents/*/artifacts/*}"
      body: "artifact"
    };
  }

  // Deletes an existing artifact.
  rpc DeleteArtifact(DeleteArtifactRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha2/{name=projects/*/incidents/*/artifacts/*}"
    };
  }

  // Returns "presets" specific to shift handoff (see SendShiftHandoff), e.g.
  // default values for handoff message fields.
  // (-- api-linter: standard-methods=disabled --)
  rpc GetShiftHandoffPresets(GetShiftHandoffPresetsRequest)
      returns (ShiftHandoffPresets) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*}/shiftHandoffPresets"
    };
  }

  // Sends a summary of the shift for oncall handoff.
  rpc SendShiftHandoff(SendShiftHandoffRequest)
      returns (SendShiftHandoffResponse) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=projects/*}/shiftHandoff:send"
      body: "*"
    };
  }

  // Creates a new subscription.
  // This will fail if:
  //    a. there are too many (50) subscriptions in the incident already
  //    b. a subscription using the given channel already exists
  rpc CreateSubscription(CreateSubscriptionRequest) returns (Subscription) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=projects/*/incidents/*}/subscriptions"
      body: "subscription"
    };
  }

  // Returns a list of subscriptions for an incident.
  rpc ListSubscriptions(ListSubscriptionsRequest)
      returns (ListSubscriptionsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*/incidents/*}/subscriptions"
    };
  }

  // Deletes an existing subscription.
  rpc DeleteSubscription(DeleteSubscriptionRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha2/{name=projects/*/incidents/*/subscriptions/*}"
    };
  }

  // Creates a role assignment on an existing incident. Normally, the user field
  // will be set when assigning a role to oneself, and the next field will be
  // set when proposing another user as the assignee. Setting the next field
  // directly to a user other than oneself is equivalent to proposing and
  // force-assigning the role to the user.
  rpc CreateIncidentRoleAssignment(CreateIncidentRoleAssignmentRequest)
      returns (IncidentRoleAssignment) {
    option (google.api.http) = {
      post: "/v1alpha2/{parent=projects/*/incidents/*}/roleAssignments"
      body: "*"
    };
  }

  // Deletes an existing role assignment.
  rpc DeleteIncidentRoleAssignment(DeleteIncidentRoleAssignmentRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha2/{name=projects/*/incidents/*/roleAssignments/*}"
    };
  }

  // Lists role assignments that are part of an incident.
  rpc ListIncidentRoleAssignments(ListIncidentRoleAssignmentsRequest)
      returns (ListIncidentRoleAssignmentsResponse) {
    option (google.api.http) = {
      get: "/v1alpha2/{parent=projects/*/incidents/*}/roleAssignments"
    };
  }

  // Starts a role handover. The proposed assignee will receive an email
  // notifying them of the assignment. This will fail if a role handover is
  // already pending.
  rpc RequestIncidentRoleHandover(RequestIncidentRoleHandoverRequest)
      returns (IncidentRoleAssignment) {
    option (google.api.http) = {
      post: "/v1alpha2/{name=projects/*/incidents/*/roleAssignments/*}:requestHandover"
      body: "*"
    };
  }

  // Confirms a role handover. This will fail if the 'proposed_assignee' field
  // of the IncidentRoleAssignment is not equal to the 'new_assignee' field of
  // the request. If the caller is not the new_assignee,
  // ForceIncidentRoleHandover should be used instead.
  rpc ConfirmIncidentRoleHandover(ConfirmIncidentRoleHandoverRequest)
      returns (IncidentRoleAssignment) {
    option (google.api.http) = {
      post: "/v1alpha2/{name=projects/*/incidents/*/roleAssignments/*}:confirmHandover"
      body: "*"
    };
  }

  // Forces a role handover. This will fail if the 'proposed_assignee' field of
  // the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
  // request. If the caller is the new_assignee, ConfirmIncidentRoleHandover
  // should be used instead.
  rpc ForceIncidentRoleHandover(ForceIncidentRoleHandoverRequest)
      returns (IncidentRoleAssignment) {
    option (google.api.http) = {
      post: "/v1alpha2/{name=projects/*/incidents/*/roleAssignments/*}:forceHandover"
      body: "*"
    };
  }

  // Cancels a role handover. This will fail if the 'proposed_assignee' field of
  // the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
  // request.
  rpc CancelIncidentRoleHandover(CancelIncidentRoleHandoverRequest)
      returns (IncidentRoleAssignment) {
    option (google.api.http) = {
      post: "/v1alpha2/{name=projects/*/incidents/*/roleAssignments/*}:cancelHandover"
      body: "*"
    };
  }
}

// Request for the CreateIncident method.
message CreateIncidentRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The incident to create.
  Incident incident = 1;
  // The resource name of the hosting Stackdriver project which the incident
  // belongs to.
  // (-- If this is empty, this is a Google internal (prod) incident. --)
  // The name is of the form `projects/{project_id_or_number}`
  // (-- go/project-id-handling --).
  string parent = 2 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "RESOURCE",
    (google.api.field_auditing).directive = "AUDIT"
  ];
}

// Request for the GetIncident method.
message GetIncidentRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
}

// Request for the UpdateIncident method.
message UpdateIncidentRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The incident to update with the new values.
  Incident incident = 1 [(google.api.field_auditing).directive = "AUDIT"];
  // List of fields that should be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request for the SearchSimilarIncidents method.
message SearchSimilarIncidentsRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident or signal, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "RESOURCE",
    (google.api.field_auditing).directive = "AUDIT"
  ];

  // Number of similar incidents to return.
  int32 page_size = 2;

  // Page token from an earlier query, as returned in 'next_page_token'.
  string page_token = 3;
}

// Response for the SearchSimilarIncidents method.
message SearchSimilarIncidentsResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // A single search result, i.e. an incident with (potentially) additional
  // information.
  message Result {
    // An incident that is "similar" to the incident or signal specified in the
    // request.
    Incident incident = 1;
  }

  // The search results, ordered by descending relevance.
  repeated Result results = 1;

  // Page token to fetch the next set of similar incidents.
  string next_page_token = 2;
}

// Request for the CreateAnnotation method.
message CreateAnnotationRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Only annotation.content is an input argument.
  Annotation annotation = 2;
}

// Request for the ListAnnotations method.
message ListAnnotationsRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Number of annotations to return.
  int32 page_size = 2;
  // Page token from an earlier query, as returned in `next_page_token`.
  string page_token = 3;
}

// Response for the ListAnnotations method.
message ListAnnotationsResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // List of annotations.
  repeated Annotation annotations = 1;
  // Page token to fetch the next set of annotations.
  string next_page_token = 2;
}

// Request for the CreateTag method.
message CreateTagRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Tag to create. Only tag.display_name is an input argument.
  Tag tag = 2;
}

// Request for the DeleteTag method.
message DeleteTagRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the tag.
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident_tag",
    (google.api.field_auditing).directive = "AUDIT"
  ];
}

// Request for the ListTagsForIncident method.
message ListTagsRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Number of tags to return.
  int32 page_size = 2;
  // Page token from an earlier query, as returned in `next_page_token`.
  string page_token = 3;
}

// Response for the ListTagsForIncident method.
message ListTagsResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Tags.
  repeated Tag tags = 1;
  // Page token to fetch the next set of tags.
  string next_page_token = 2;
}

// Request for the SearchTagSuggestions method.
message SearchTagSuggestionsRequest {
  option (google.api.message_visibility).restriction = "GOOGLE_INTERNAL";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // The string that the user has typed so far to match against auto complete
  // tag suggestions. It is plain text and doesn't use any structured query
  // method.
  //
  // Currently, if the query is empty, no suggestions are returned.
  string query = 2 [(datapol.semantic_type) = ST_USER_QUERY];
}

// Response for the SearchTagSuggestions method.
message SearchTagSuggestionsResponse {
  option (google.api.message_visibility).restriction = "GOOGLE_INTERNAL";
  // Describes a single tag suggestion.
  message TagSuggestion {
    // Display name of the tag (e.g., "cause:rollout").
    string display_name = 1 [(datapol.semantic_type) = ST_USER_CONTENT];
  }

  // The tag suggestions sorted from high to low importance.
  repeated TagSuggestion tag_suggestions = 1;
}

// Request for the CreateSignal method.
message CreateSignalRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The resource name of the hosting Stackdriver project which requested
  // signal belongs to.
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "RESOURCE",
    (google.api.field_auditing).directive = "AUDIT"
  ];

  // The signal to create.
  Signal signal = 2;
}

// Request for the ListSignals method.
message ListSignalsRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The resource name of the hosting Stackdriver project which requested
  // incidents belong to.
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "RESOURCE",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Filter to specify which signals should be returned.
  // (--
  // TODO(davidcbc): This needs to be able to handle retrieval of signals by
  // incident and by alertmanager incident id
  // --)
  string filter = 2;

  // Maximum number of `signals` to return in the response.
  int32 page_size = 3;
  // Page token from an earlier query, as returned in `next_page_token`. All
  // field values except for page_size and page_token should be the same as the
  // original query (may return an error or unexpected data otherwise).
  string page_token = 4;
}

// Response for the ListSignals method.
message ListSignalsResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // List of signals that have not been moved into an incident yet.
  repeated Signal signals = 1;
  // Page token to fetch the next set of signals.
  string next_page_token = 2;
}

// Request for the GetSignal method.
message GetSignalRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the Signal resource, e.g.
  // "projects/{project_id}/signals/{signal_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/signals/{signal_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "signal",
    (google.api.field_auditing).directive = "AUDIT"
  ];
}

// Request for the UpdateSignal method.
message UpdateSignalRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The signal to update with the new values.
  Signal signal = 1 [(google.api.field_auditing).directive = "AUDIT"];
  // List of fields that should be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request for the AcknowledgeSignal method.
message AcknowledgeSignalRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the Signal resource, e.g.
  // "projects/{project_id}/signals/{signal_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/signals/{signal_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "signal",
    (google.api.field_auditing).directive = "AUDIT"
  ];
}

// Response of the AcknowledgeSignal method.
message AcknowledgeSignalResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
}

// Request for the CloseSignal method.
message CloseSignalRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the Signal resource, e.g.
  // "projects/{project_id}/signals/{signal_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/signals/{signal_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "signal",
    (google.api.field_auditing).directive = "AUDIT"
  ];
}

// Response of the CloseSignal method.
message CloseSignalResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
}

// Request for the ListIncidentMetrics method.
message ListMetricsRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Number of metrics to return.
  int32 page_size = 2;
  // Page token from an earlier query, as returned in `next_page_token`.
  string page_token = 3;
}

// Response for the ListMetrics method.
message ListMetricsResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // List of metrics.
  repeated Metric metrics = 1;
  // Page token to fetch the next set of metrics.
  string next_page_token = 2;
}

// Request for the SearchIncidents method.
message SearchIncidentsRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The resource name of the hosting Stackdriver project which requested
  // incidents belong to.
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "RESOURCE",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // An expression that defines which incidents to return.
  //
  // Search atoms can be used to match certain specific fields.  Otherwise,
  // plain text will match text fields in the incident.
  //
  // Search atoms:
  // * `start` - (timestamp) The time the incident started.
  // * `stage` - The stage of the incident, one of detected, triaged, mitigated,
  //   resolved, documented, or duplicate (which correspond to values in the
  //   Incident.Stage enum). These are ordered, so `stage<resolved` is
  //   equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
  // * `severity` - (Incident.Severity) The severity of the incident.
  //    + Supports matching on a specific severity (e.g., `severity:major`) or
  //      on a range (e.g., `severity>medium`, `severity<=minor`, etc.).
  //
  // Timestamp formats:
  // * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
  //   In other words, the "<" operator will match dates before that date, the
  //   ">" operator will match dates after that date, and the ":" or "="
  //   operators will match the entire day.
  //   (-- TODO(b/120800693): Support timestamps, not just dates. --)
  // * Nd (e.g. 7d) - a relative number of days ago, treated as a moment in time
  //   (as opposed to a day-wide span) a multiple of 24 hours ago (as opposed to
  //   calendar days).  In the case of daylight savings time, it will apply the
  //   current timezone to both ends of the range.  Note that exact matching
  //   (e.g. `start:7d`) is unlikely to be useful because that would only match
  //   incidents created precisely at a particular instant in time.
  //
  // Examples:
  //
  // * `foo` - matches incidents containing the word "foo"
  // * `"foo bar"` - matches incidents containing the phrase "foo bar"
  // * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
  //   and "bar"
  // * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
  //   "foo" but not the word "bar"
  // * `foo OR bar` - matches incidents containing the word "foo" or the word
  //   "bar"
  // * `start>2018-11-28` - matches incidents which started after November 11,
  //   2018.
  // * `start<=2018-11-28` - matches incidents which started on or before
  //   November 11, 2018.
  // * `start:2018-11-28` - matches incidents which started on November 11,
  //   2018.
  // * `start>7d` - matches incidents which started after the point in time 7*24
  //   hours ago
  // * `start>180d` - similar to 7d, but likely to cross the daylight savings
  //   time boundary, so the end time will be 1 hour different from "now."
  // * `foo AND start>90d AND stage<resolved` - unresolved incidents from the
  //   past 90 days containing the word "foo"
  //
  // (-- See go/irm-search-api-design and go/filtering --)
  // (-- TODO(b/121044117): Move this to user documentation at go/irm-search --)
  string query = 2 [(datapol.semantic_type) = ST_USER_QUERY];
  // Number of incidents to return.
  int32 page_size = 3;
  // Page token from an earlier query, as returned in `next_page_token`.
  string page_token = 4;
  // The time zone name. It should be an IANA TZ name, such as
  // "America/Los_Angeles". For more information,
  // see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
  // If no time zone is specified, the default is UTC.
  string time_zone = 5;
  // Specifies the desired scopes to filter on.
  // When multiple scopes are specified, the filter will treat them as a union,
  // i.e., they will be logically `OR`ed together. An empty list will match all
  // incidents.
  repeated string signal_scope_names = 6
      [(google.api.field_visibility).restriction = "GOOGLE_INTERNAL"];
}

// Response for the SearchIncidents method.
message SearchIncidentsResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Incidents.
  repeated Incident incidents = 1;
  // Page token to fetch the next set of incidents.
  string next_page_token = 2;
  // If set, all results will generally have a start time on or after this
  // timestamp.  This is calculated from the query string and does not take
  // actual search results into account.  This may not be as tightly constrained
  // to the query string as logically possible and may be tightened as the logic
  // improves.  Results may have start times outside this range if an incident
  // has recently changed and the search index is out of date.
  google.protobuf.Timestamp query_min_start_time = 3
      [(google.api.field_visibility).restriction = "GOOGLE_INTERNAL"];
  // If set, all results will generally have a start time before this timestamp.
  // For more information, see min_start_time.
  google.protobuf.Timestamp query_max_start_time = 4
      [(google.api.field_visibility).restriction = "GOOGLE_INTERNAL"];
}

// Request to escalate an incident.
message EscalateIncidentRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The incident to escalate with the new values.
  Incident incident = 1 [(google.api.field_auditing).directive = "AUDIT"];
  // List of fields that should be updated.
  google.protobuf.FieldMask update_mask = 2;
  // Subscriptions to add or update. Existing subscriptions with the same
  // channel and address as a subscription in the list will be updated.
  repeated Subscription subscriptions = 3;
  // Tags to add. Tags identical to existing tags will be ignored.
  repeated Tag tags = 4;
  // Roles to add or update. Existing roles with the same type (and title, for
  // TYPE_OTHER roles) will be updated.
  repeated IncidentRoleAssignment roles = 5;
  // Artifacts to add. All artifacts are added without checking for duplicates.
  repeated Artifact artifacts = 6;
}

// Response for EscalateIncident.
message EscalateIncidentResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The escalated incident.
  Incident incident = 1;
  // New or modified subscriptions.
  repeated Subscription subscriptions = 2;
  // New or modified tags.
  repeated Tag tags = 3;
  // New or modified roles.
  repeated IncidentRole roles = 4;
  // New or modified artifacts.
  repeated Artifact artifacts = 5;
}

// Request for the CreateArtifact method.
message CreateArtifactRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // The artifact to create.
  Artifact artifact = 2;
}

// Request for the ListArtifacts method.
message ListArtifactsRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Number of artifacts to return.
  int32 page_size = 2;
  // Page token from an earlier query, as returned in `next_page_token`.
  string page_token = 3;
}

// Response for the ListArtifacts method.
message ListArtifactsResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // List of artifacts.
  repeated Artifact artifacts = 1;
  // Page token to fetch the next set of artifacts.
  string next_page_token = 2;
}

// Request for the UpdateArtifact method.
message UpdateArtifactRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The artifact to update with the new values.
  Artifact artifact = 1 [(google.api.field_auditing).directive = "AUDIT"];
  // List of fields that should be updated.
  google.protobuf.FieldMask update_mask = 2;
}

// Request for deleting an artifact.
message DeleteArtifactRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the artifact.
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident_artifact",
    (google.api.field_auditing).directive = "AUDIT"
  ];
}

// GetShiftHandoffPresets RPC request.
message GetShiftHandoffPresetsRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the Stackdriver project that the presets belong to. e.g.
  // `projects/{project_id}`
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "RESOURCE",
    (google.api.field_auditing).directive = "AUDIT"
  ];
}

// GetShiftHandoffPresets RPC response.
message ShiftHandoffPresets {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The recipients that the user might want to send the shift handoff to, in
  // the form of email addresses, e.g. "user@example.com". Can be empty.
  repeated string recipients = 1 [(datapol.semantic_type) = ST_EMAIL_ID];

  // The recipients that the user might want to CC on the shift handoff, in the
  // form of email addresses, e.g. "user@example.com". Can be empty.
  repeated string cc = 2 [(datapol.semantic_type) = ST_EMAIL_ID];

  // A suggested subject for the shift handoff email. Can be empty.
  string subject = 3 [(datapol.semantic_type) = ST_USER_CONTENT];
}

// SendShiftHandoff and PreviewShiftHandoff RPC request.
message SendShiftHandoffRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // The resource name of the Stackdriver project that the handoff is being sent
  // from. e.g. `projects/{project_id}`
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "RESOURCE",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Email addresses of the recipients of the handoff, e.g. "user@example.com".
  // Must contain at least one entry.
  repeated string recipients = 2 [(datapol.semantic_type) = ST_EMAIL_ID];

  // Email addresses that should be CC'd on the handoff. Optional.
  repeated string cc = 3 [(datapol.semantic_type) = ST_EMAIL_ID];

  // The subject of the email. Required.
  string subject = 4 [(datapol.semantic_type) = ST_USER_CONTENT];

  // Content type string, e.g. 'text/plain' or 'text/html'.
  string notes_content_type = 5;
  // Additional notes to be included in the handoff. Optional.
  string notes_content = 6;

  // Describes an incident for inclusion in the handoff.
  // This is wrapped in a message to provide flexibility for potentially
  // attaching additional data to each incident in the future.
  message Incident {
    // Resource name of the incident, e.g.
    // "projects/{project_id}/incidents/{incident_id}".
    // (-- go/not-api-precedent: For internal (prod) users, which will not have
    // a project, the name should use the "-" wildcard in place of project_id,
    // e.g. projects/-/incidents/{incident_id}
    // This is not the typical syntax for the wildcard, which normally means
    // "any project" rather than "lack of project". --)
    string name = 1;
  };
  // The set of incidents that should be included in the handoff. Optional.
  repeated Incident incidents = 7;

  // If set to true a ShiftHandoffResponse will be returned but the handoff
  // will not actually be sent.
  bool preview_only = 8;
}

// SendShiftHandoff and PreviewShiftHandoff RPC response.
message SendShiftHandoffResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Content type string, e.g. 'text/plain' or 'text/html'.
  string content_type = 1 [(datapol.semantic_type) = ST_USER_CONTENT];
  // The contents of the handoff that was sent or would have been sent (if the
  // request was preview_only).
  // This will typically contain a full HTML document.
  string content = 2 [(datapol.semantic_type) = ST_USER_CONTENT];
}

// Request for the CreateSubscription method.
message CreateSubscriptionRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // The subscription to create.
  Subscription subscription = 2;
}

// Request for the ListSubscriptions method.
message ListSubscriptionsRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Number of subscriptions to return.
  int32 page_size = 2;
  // Page token from an earlier query, as returned in `next_page_token`.
  string page_token = 3;
}

// Response for the ListSubscriptions method.
message ListSubscriptionsResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // List of subscriptions.
  repeated Subscription subscriptions = 1;
  // Page token to fetch the next set of subscriptions.
  string next_page_token = 2;
}

// Request for deleting a subscription.
message DeleteSubscriptionRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the subscription.
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident_subscription",
    (google.api.field_auditing).directive = "AUDIT"
  ];
}

// Request for creating a role assignment.
message CreateIncidentRoleAssignmentRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident_role_assignment",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Role assignment to create.
  IncidentRoleAssignment incident_role_assignment = 2;
}

// Request for deleting a role assignment.
message DeleteIncidentRoleAssignmentRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the role assignment.
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident_role_assignment",
    (google.api.field_auditing).directive = "AUDIT"
  ];
}

// Request to list role assignments of an incident.
message ListIncidentRoleAssignmentsRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the incident, e.g.
  // "projects/{project_id}/incidents/{incident_id}".
  // (-- go/not-api-precedent: For internal (prod) users, which will not have a
  // project, the name should use the "-" wildcard in place of project_id,
  // e.g. projects/-/incidents/{incident_id}
  // This is not the typical syntax for the wildcard, which normally means
  // "any project" rather than "lack of project". --)
  string parent = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident_role_assignment",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Number of assignments to return.
  int32 page_size = 2;
  // Page token from an earlier query, as returned in `next_page_token`.
  string page_token = 3;
}

// Response for the ListIncidentRoleAssignments method.
message ListIncidentRoleAssignmentsResponse {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // List of assignments.
  repeated IncidentRoleAssignment incident_role_assignments = 1;
  // Page token to fetch the next set of assignments.
  string next_page_token = 2;
}

// Request to start a role handover.
message RequestIncidentRoleHandoverRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the role assignment.
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident_role_assignment",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // The proposed assignee.
  User new_assignee = 2;
}

// Request to confirm a role handover.
message ConfirmIncidentRoleHandoverRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the role assignment.
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident_role_assignment",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // The proposed assignee, who will now be the assignee. This should be the
  // current user; otherwise ForceRoleHandover should be called.
  User new_assignee = 2;
}

// Request to force a role handover.
message ForceIncidentRoleHandoverRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the role assignment.
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident_role_assignment",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // The proposed assignee, who will now be the assignee. This should not be
  // the current user; otherwise ConfirmRoleHandover should be called.
  User new_assignee = 2;
}

// Request to cancel a role handover.
message CancelIncidentRoleHandoverRequest {
  option (google.api.message_visibility).restriction =
      "INCIDENTS_TRUSTED_TESTER";
  // Resource name of the role assignment.
  string name = 1 [
    (datapol.semantic_type) = ST_IDENTIFYING_ID,
    (google.api.field_policy).resource_type = "incident_role_assignment",
    (google.api.field_auditing).directive = "AUDIT"
  ];
  // Person who was proposed as the next assignee (i.e.
  // IncidentRoleAssignment.proposed_assignee) and whose proposal is being
  // cancelled.
  User new_assignee = 2;
}
